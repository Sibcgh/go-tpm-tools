substitutions:
  '_IMAGE_NAME': ''
  '_IMAGE_PROJECT': ''
  '_CLEANUP': 'true'
  '_VM_NAME_PREFIX': 'cs-cgpu-test'
  '_ZONE': 'us-west1-a'
  '_WORKLOAD_IMAGE': 'us-west1-docker.pkg.dev/confidential-space-images-dev/cs-integ-test-images/gpu/cuda-vector-add:latest'
steps:
- name: 'gcr.io/cloud-builders/gcloud'
  id:  CreateTDXCVMWithUnsupportedGPU
  entrypoint: 'bash'
  env:
  - 'BUILD_ID=$BUILD_ID'
  args: ['create_gpu_vm.sh','-i', '${_IMAGE_NAME}',
          '-p', '${_IMAGE_PROJECT}',
          '-m', 'tee-image-reference=${_WORKLOAD_IMAGE},tee-container-log-redirect=true,tee-install-gpu-driver=true',
          '-n', '${_VM_NAME_PREFIX}-${BUILD_ID}-unsup',
          '-z', '${_ZONE}',
          '-v', 'n1-standard-4',
          '-g', 'nvidia-tesla-p100',
          '-c', '1'
        ]
- name: 'gcr.io/cloud-builders/gcloud'
  id:  CreateTDXCVMWithNoGPU
  entrypoint: 'bash'
  env:
  - 'BUILD_ID=$BUILD_ID'
  args: ['create_vm.sh','-i', '${_IMAGE_NAME}',
          '-p', '${_IMAGE_PROJECT}',
          '-m', 'tee-image-reference=${_WORKLOAD_IMAGE},tee-container-log-redirect=true,tee-install-gpu-driver=true',
          '-n', '${_VM_NAME_PREFIX}-${BUILD_ID}-nogpu',
          '-z', '${_ZONE}',
        ]
- name: 'gcr.io/cloud-builders/gcloud'
  id: CreateTDXCVMWithConfidentialGPU
  entrypoint: 'bash'
  env:
  - 'BUILD_ID=$BUILD_ID'
  args: ['create_gpu_vm.sh','-i', '${_IMAGE_NAME}',
          '-p', '${_IMAGE_PROJECT}',
          '-m', 'tee-image-reference=${_WORKLOAD_IMAGE},tee-container-log-redirect=true,tee-install-gpu-driver=true',
          '-n', '${_VM_NAME_PREFIX}-${BUILD_ID}-tdxcvm-cgpu',
          '-z', 'us-east5-a', # H100 GPU with Confidential Compute on are available only under us-central1 and us-east5 regions.  
          '-v', 'a3-highgpu-1g',
          '-g', 'nvidia-h100-80gb',
          '-c', '1',
          '-x', 'TDX',
        ]
- name: 'gcr.io/cloud-builders/gcloud'
  id: CreateTDXCVMWithCGPUNoMetadataFlag
  entrypoint: 'bash'
  env:
  - 'BUILD_ID=$BUILD_ID'
  args: ['create_gpu_vm.sh','-i', '${_IMAGE_NAME}',
          '-p', '${_IMAGE_PROJECT}',
          '-m', 'tee-image-reference=${_WORKLOAD_IMAGE},tee-container-log-redirect=true',
          '-n', '${_VM_NAME_PREFIX}-${BUILD_ID}-noflag',
          '-z', 'us-east5-a', # H100 GPU with Confidential Compute on are available only under us-central1 and us-east5 regions.  
          '-v', 'a3-highgpu-1g',
          '-g', 'nvidia-h100-80gb',
          '-c', '1',
          '-x', 'TDX',
        ]
- name: 'gcr.io/cloud-builders/gcloud'
  id:  CreateTDXCVMWithNonConfidentialGPU
  entrypoint: 'bash'
  env:
  - 'BUILD_ID=$BUILD_ID'
  args: ['create_gpu_vm.sh','-i', '${_IMAGE_NAME}',
          '-p', '${_IMAGE_PROJECT}',
          '-m', 'tee-image-reference=${_WORKLOAD_IMAGE},tee-container-log-redirect=true,tee-install-gpu-driver=true',
          '-n', '${_VM_NAME_PREFIX}-${BUILD_ID}-non-cgpu',
          '-z', '${_ZONE}',
          '-v', 'n1-standard-4',
          '-g', 'nvidia-tesla-t4',
          '-c', '1'
        ]
- name: 'gcr.io/cloud-builders/gcloud'
  id: UnsupportedGpuWorkloadTest
  entrypoint: 'bash'
  args: ['scripts/gpu/test_gpu_unsupported_gputype.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-unsup', '${_ZONE}']
- name: 'gcr.io/cloud-builders/gcloud'
  id: NoGpuWorkloadTest
  entrypoint: 'bash'
  args: ['scripts/gpu/test_gpu_nogpu.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-nogpu', '${_ZONE}']
- name: 'gcr.io/cloud-builders/gcloud'
  id: ConfidentialGpuWorkloadTest
  entrypoint: 'bash'
  args: ['scripts/gpu/test_gpu_workload.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-tdxcvm-cgpu', 'us-east5-a']
- name: 'gcr.io/cloud-builders/gcloud'
  id: NoMetadataFlagWorkloadTest
  entrypoint: 'bash'
  args: ['scripts/gpu/test_gpu_nometadata.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-noflag', 'us-east5-a']
- name: 'gcr.io/cloud-builders/gcloud'
  id: NonConfidentialGpuWorkloadTest
  entrypoint: 'bash'
  args: ['scripts/gpu/test_non_confidential_gpu.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-non-cgpu', '${_ZONE}']
- name: 'gcr.io/cloud-builders/gcloud'
  id: UnsupportedGpuVmCleanUp
  entrypoint: 'bash'
  env:
  - 'CLEANUP=$_CLEANUP'
  args: ['cleanup.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-unsup', '${_ZONE}']
- name: 'gcr.io/cloud-builders/gcloud'
  id: NoGpuVmCleanUp
  entrypoint: 'bash'
  env:
  - 'CLEANUP=$_CLEANUP'
  args: ['cleanup.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-nogpu', '${_ZONE}']
- name: 'gcr.io/cloud-builders/gcloud'
  id: ConfidentialGpuVmCleanUp
  entrypoint: 'bash'
  env:
  - 'CLEANUP=$_CLEANUP'
  args: ['cleanup.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-tdxcvm-cgpu', 'us-east5-a']
- name: 'gcr.io/cloud-builders/gcloud'
  id: NoMetadataVmCleanUp
  entrypoint: 'bash'
  env:
  - 'CLEANUP=$_CLEANUP'
  args: ['cleanup.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-noflag', 'us-east5-a']
- name: 'gcr.io/cloud-builders/gcloud'
  id: NonConfidentialGpuVmCleanUp
  entrypoint: 'bash'
  env:
  - 'CLEANUP=$_CLEANUP'
  args: ['cleanup.sh', '${_VM_NAME_PREFIX}-${BUILD_ID}-non-cgpu', '${_ZONE}']
# Must come after cleanup.
- name: 'gcr.io/cloud-builders/gcloud'
  id: NoGpuVmCheckFailure
  entrypoint: 'bash'
  env:
  - 'BUILD_ID=$BUILD_ID'
  args: ['check_failure.sh']

# options:
#   pool:
#     name: 'projects/confidential-space-images-dev/locations/us-west1/workerPools/cs-image-build-vpc'
