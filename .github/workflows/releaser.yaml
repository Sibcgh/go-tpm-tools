name: release

on:
  push:
    branches:
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:
    inputs:
      refToBuild:
        description: 'Branch, tag or commit SHA1 to build'
        required: true
        type: string

jobs:
  release:
    strategy:
      matrix:
        # We can cross-compile from Linux to macOS and Windows. See .goreleaser.yaml
        # So running just on ubuntu is sufficient.
        go-version: [1.21.x]
        os: [ubuntu-latest]

    name: Release (${{ matrix.os}}, Go ${{ matrix.go-version }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.refToBuild }}
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
      - shell: bash
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - id: cache
        uses: actions/cache@v3
        with:
          path: dist/${{ matrix.os }}
          key: ${{ matrix.go }}-${{ env.sha_short }}
      - name: Install Linux packages
        run: sudo apt-get -y install libssl-dev
        if: runner.os == 'Linux'
      - name: Build all modules
        run: go build -v ./... ./cmd/... ./launcher/... ./verifier/...
        
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - name: Dump input context
        env:
          INPUT_CONTEXT: ${{ toJson(inputs) }}
        run: echo "$INPUT_CONTEXT"
      - name: Dump ref to build
        env:
          INPUT_CONTEXT: ${{ inputs.refToBuild }}
        run: echo "$INPUT_CONTEXT"
        
      - name: Show default environment variables
        run: |
          echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
          echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
          echo "The run id is: $GITHUB_RUN_ID"
          echo "The GitHub Actor's username is: $GITHUB_ACTOR"
          echo "GitHub SHA: $GITHUB_SHA"
      - name: Success
        if: success()
        run: echo "SUCCESS"
      - name: StartsWith
        env:
          INPUT_CONTEXT: ${{ toJson(inputs) }}
        if: startsWith(${{ inputs.refToBuild }}, 'refs/tags/')
        run: echo "STARTSWITH" && echo $INPUT_CONTEXT
      - name: StartsWithEmptyStr
        env:
          INPUT_CONTEXT: ${{ toJson(inputs) }}
        if: startsWith('', 'refs/tags/')
        run: echo "STARTSWITH" && echo $INPUT_CONTEXT
      - name: StartsWithEmptyStrDoubled
        env:
          INPUT_CONTEXT: ${{ toJson(inputs) }}
        if: startsWith("", 'refs/tags/')
        run: echo "STARTSWITH" && echo $INPUT_CONTEXT
      - name: BothEmptyStr
        env:
          INPUT_CONTEXT: ${{ toJson(inputs) }}
        if: startsWith("", "refs/tags/")
        run: echo "STARTSWITH" && echo $INPUT_CONTEXT

      - name: Cached
        if: steps.cache.outputs.cache-hit != 'true'
        run: echo "NOT CACHED"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        if: success() && startsWith(github.ref, 'refs/tags/') && steps.cache.outputs.cache-hit != 'true'
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run GoReleaser Manually
        uses: goreleaser/goreleaser-action@v6
        if: success() && startsWith(${{ inputs.refToBuild }}, 'refs/tags/') && steps.cache.outputs.cache-hit != 'true'
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

